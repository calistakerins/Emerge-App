@page "/depts"
@using emerge.Data
@using emerge.Controller
@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Net.Mime

<MudAppBar Class="pb-2 pt-2" Fixed="false" Elevation="0">
    <MudText Typo="Typo.h5">Departments</MudText>
    <MudSpacer />
</MudAppBar>
@if (CurrentProfile.currentUser.Admin)
{
    <AdminNavBar />
}
else
{
    <NavBar />

}
<MudContainer Class="mt-16 pb-10" >
    <MudText Typo="Typo.h3" Class="mt-5"><b>Departments</b></MudText>
    <div>
        <MudButton Variant="Variant.Outlined" OnClick="showFollowed">Followed Departments</MudButton>
        <MudButton Variant="Variant.Outlined" OnClick="showAll">All Departments</MudButton>
    </div>

    <MudGrid Spacing="10" Class="pa-4 pr-7">
        @if (showAllDepartments)
        {
            @foreach (Department dept in deptController.getDeptList()) //loop through dept list
            {

                <MudItem xs="6" sm="6" md="6" lg="6" Class="width mt-4 pa-6" Style="width: 300px">
                    <MudContainer MaxWidth="MaxWidth.ExtraSmall" Style="width: 348px">
                        <MudPaper Class="product-item" Elevation="3" Style="cursor:pointer;">
                            <MudItem Class="mb-1">
                                <MudImage Src=@dept.ImageUrl Width="300" Height="200"></MudImage>
                            </MudItem>
                            <MudItem xs="12" Class="mx-2">
                                <MudPaper Elevation="0" Class="d-flex flex-wrap justify-space-between">
                                    <MudText Typo="Typo.h6">@dept.Title</MudText>
                                </MudPaper>
                            </MudItem>
                            <MudItem xs="12" Class="ma-2">
                                <MudText Typo="Typo.button">@dept.Description</MudText>
                            </MudItem>
                            <MudItem xs="12" Class="mx-2 my-1">
                                <MudButton Variant="Variant.Filled" Color="Color.Primary" FullWidth="true">View more</MudButton>
                            </MudItem>
                            <MudItem xs="12" Class="mx-2 my-1 pb-3">
                                <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="() => HandleButtonPress(dept)" FullWidth="true">@displayCorrectFollowButton(dept.Id) </MudButton>
                            </MudItem>
                        </MudPaper>
                    </MudContainer>
                </MudItem>
            }
            }
            else
            {
                var x = CurrentProfile.currentUser.Following;
                @foreach (var dept in CurrentProfile.currentUser.Following) //loop through dept list
            {

                <MudItem xs="6" sm="6" md="6" lg="6" Class="width mt-4 pa-6" Style="width: 300px">
                    <MudContainer MaxWidth="MaxWidth.ExtraSmall" Style="width: 348px">
                        <MudPaper Class="product-item" Elevation="3" Style="cursor:pointer;">
                            <MudItem Class="mb-1">
                                <MudImage Src=@dept.ImageUrl Width="300" Height="200"></MudImage>
                            </MudItem>
                            <MudItem xs="12" Class="mx-2">
                                <MudPaper Elevation="0" Class="d-flex flex-wrap justify-space-between">
                                    <MudText Typo="Typo.h6">@dept.Title</MudText>
                                </MudPaper>
                            </MudItem>
                            <MudItem xs="12" Class="ma-2">
                                <MudText Typo="Typo.button">@dept.Description</MudText>
                            </MudItem>
                            <MudItem xs="12" Class="mx-2 my-1">
                                <MudButton Variant="Variant.Filled" Color="Color.Primary" FullWidth="true">View more</MudButton>
                            </MudItem>
                            <MudItem xs="12" Class="mx-2 my-1 pb-3">
                                <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="() => HandleButtonPress(dept)" FullWidth="true">@displayCorrectFollowButton(dept.Id)</MudButton>
                            </MudItem>
                        </MudPaper>
                    </MudContainer>
                </MudItem>
            }
        }


    </MudGrid>
</MudContainer>

@code {
    private DepartmentController deptController = new DepartmentController();
    private bool showAllDepartments = true;

    string displayCorrectFollowButton(string id)
    {
        foreach (var dept in CurrentProfile.currentUser.Following)
        {
            if (String.Compare(id, dept.Id) == 0) // id's are same
            {
                return "Unfollow";
            }
        }
        return "Follow";
    }

    private async Task HandleButtonPress(Department dept)
    {
        // To Do: Get user followed status for given department

        // if (currently following)
        foreach (var followed in CurrentProfile.currentUser.Following)
        {
            if (String.Compare(followed.Id, dept.Id) == 0) // id's are same
            {
                await updateFollowing(dept, false); // unfollow
                StateHasChanged();
                return;
            }
        }
        await updateFollowing(dept); // follow
        StateHasChanged();
        return;
    }


    void showAll()
    {
        showAllDepartments = true;
        StateHasChanged();
    }
    void showFollowed()
    {
        showAllDepartments = false;
        StateHasChanged();
    }


    private async Task updateFollowing(Department dept, bool follow = true)
    {
        string updateURI;
        if (follow)
        {
            CurrentProfile.currentUser.Following.Add(dept);
            updateURI = "https://emerge-azure.azurewebsites.net/api/followdept/" + CurrentProfile.currentUser.Username + "?";
        }
        else
        {
            CurrentProfile.currentUser.Following.Remove(dept);
            updateURI = "https://emerge-azure.azurewebsites.net/api/unfollowdept/" + CurrentProfile.currentUser.Username + "?";
        }

        HttpClient client = new HttpClient { BaseAddress = new Uri(updateURI) };

        HttpResponseMessage response = null;

        var payloadString = new StringContent(System.Text.Json.JsonSerializer.Serialize(dept), Encoding.UTF8, MediaTypeNames.Application.Json);

        response = await client.PatchAsync(client.BaseAddress, payloadString);
        // PostAsync(client.BaseAddress, payloadString);

    }
}