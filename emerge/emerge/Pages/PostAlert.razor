@page "/postalert"
@using emerge.Data
@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Net.Mime
@using emerge.Controller

<MudAppBar Class="pb-2 pt-2" Fixed="false" Elevation="0">
    <MudText Typo="Typo.h5">Post Alert</MudText>
</MudAppBar>
<AdminNavBar />
<MudMainContent>
    <MudContainer MaxWidth="MaxWidth.Medium">
        <MudCard>
            <MudCardContent>
                <MudTextField Label="Title" @bind-Value="Title" Variant="Variant.Filled" Class="pt-4 pb-4" />
                <MudNumericField Label="Priority" @bind-Value="Priority" Variant="Variant.Filled" Min="0" Max="5" Class="pt-4 pb-4" />
                <MudTextField T="string" Label="Affected" @bind-Value="Affected" Variant="Variant.Filled" Lines="2" Class="pt-4 pb-4" />

                <MudSelect T="Department" Label="Department" @bind-Value="Department" Variant="Variant.Filled" AnchorOrigin="Origin.BottomCenter">
                    @foreach (var selectItem in CurrentProfile.currentUser.Following)
                    {
                        <MudSelectItem Value="@selectItem">@selectItem.Title</MudSelectItem>
                    }
                </MudSelect>

                <MudTextField T="string" Label="Alert Image URL" @bind-Value="ImageUrl" Variant="Variant.Filled" Lines="2" Class="pt-4 pb-4" />
                <MudTextField T="string" Label="Alert Description" @bind-Value="Description" Variant="Variant.Filled" Lines="5" Class="pt-4 pb-4" />
            </MudCardContent>

            <MudCardActions>
                <MudButton Href="/adminprofile"
                           Disabled="@_processing"
                           OnClick="AddNewsAlert"
                           Variant="Variant.Filled"
                           Color="Color.Primary"
                           Class="ml-auto mr-auto mb-4">
                    @if (_processing)
                    {
                        <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                        <MudText Class="ms-2">Processing</MudText>
                    }
                    else
                    {
                        <MudText>Post Alert</MudText>
                    }
                </MudButton>
            </MudCardActions>

        </MudCard>
        <MudText Typo="Typo.h3" Class="mt-5"><b></b></MudText>

    </MudContainer>
</MudMainContent>

@code {

    public DateTime Time { get; set; } = DateTime.Now;
    public string Id { get; set; } = Guid.NewGuid().ToString("n");
    public string Title { get; set; }
    public string Affected { get; set; }
    public string Author { get; set; }
    public Department Department { get; set; }
    public string Description { get; set; }
    public int Priority { get; set; }
    public string ImageUrl { get; set; }
    public List<UpdateInfo> Updates { get; set; } = new List<UpdateInfo>();
    private bool _processing = false;
    public UserProfile currentUser = CurrentProfile.currentUser;
    private DepartmentController dController = new DepartmentController();



    private async Task AddNewsAlert()
    {
        _processing = true;

        //harrison azure
        //HttpClient client = new HttpClient { BaseAddress = new Uri("https://emerge-azure.azurewebsites.net/api/newsalert?") };

        //megan azure
        HttpClient client = new HttpClient { BaseAddress = new Uri("https://emergeproj.azurewebsites.net/api/newsalert?") };
        HttpClient client2 = new HttpClient { BaseAddress = new Uri("https://emergeproj.azurewebsites.net/api/newpost/" + currentUser.Username + "?") };

        HttpResponseMessage response = null;
        HttpResponseMessage response2 = null;


        var payload = new NewsAlert()
        {
            Id = Id,
            Time = Time,
            Title = Title,
            Affected = parseToList(this.Affected),
            Author = Author,
            Department = Department,
            Description = Description,
            Priority = Priority,
            ImageUrl = ImageUrl,
            Updates = Updates
        };

        var payloadString = new StringContent(System.Text.Json.JsonSerializer.Serialize(payload), Encoding.UTF8, MediaTypeNames.Application.Json);
        var payloadString2 = new StringContent(System.Text.Json.JsonSerializer.Serialize(payload), Encoding.UTF8, MediaTypeNames.Application.Json);
        response = await client.PostAsync(client.BaseAddress, payloadString);
        response2 = await client2.PatchAsync(client2.BaseAddress, payloadString2);

        _processing = false;
        StateHasChanged();
    }


    private static List<String> parseToList(string affected)
    {
        List<string> result = String.Concat(affected.Where(c => !Char.IsWhiteSpace(c))).Split(new char[] { ',' }).ToList();
        return result;
    }



}

