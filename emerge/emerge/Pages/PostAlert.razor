@page "/postalert"
@using emerge.Data
@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Net.Mime

<AdminNavBar />
<MudMainContent>
    <MudContainer MaxWidth="MaxWidth.Medium">

        <MudText Typo="Typo.h3" Class="pb-8" Color="Color.Primary">Post Alert</MudText>

        <MudCard>
            <MudCardContent>
                <MudTextField Label="Title" @bind-Value="Title" Variant="Variant.Filled" Class="pt-4 pb-4" />
                <MudNumericField Label="Priority" @bind-Value="Priority" Variant="Variant.Filled" Min="0" Max="5" Class="pt-4 pb-4" />
                <MudTextField T="string" Label="Affected" @bind-Value="Affected" Variant="Variant.Filled" Lines="2" Class="pt-4 pb-4" />
                <MudTextField T="string" Label="Alert Image URL" @bind-Value="ImageUrl" Variant="Variant.Filled" Lines="2" Class="pt-4 pb-4" />
                <MudTextField T="string" Label="Alert Description" @bind-Value="Description" Variant="Variant.Filled" Lines="5" Class="pt-4 pb-4" />
            </MudCardContent>

            <MudCardActions>
            <MudButton Href="/profile"
                       Disabled="@_processing"
                       OnClick="AddNewsAlert"
                       Variant="Variant.Filled"
                       Color="Color.Primary"
                       Class="ml-auto mr-auto mb-4">
                @if (_processing)
                {
                    <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                    <MudText Class="ms-2">Processing</MudText>
                }
                else
                {
                    <MudText>Post Alert</MudText>
                }
            </MudButton>
            </MudCardActions>
        </MudCard>
        <MudText Typo="Typo.h3" Class="mt-5"><b></b></MudText>

        </MudContainer>
    </MudMainContent>

    @code {

        public DateTime Time { get; set; } = DateTime.Now;
        public string Title { get; set; }
        public string Affected { get; set; }
        public string Author { get; set; }
        public string Description { get; set; }
        public int Priority { get; set; }
        public string ImageUrl { get; set; }
        public List<UpdateInfo> Updates { get; set; } = new List<UpdateInfo>();
        private bool _processing = false;

        private async Task AddNewsAlert()
        {
            _processing = true;

            HttpClient client = new HttpClient { BaseAddress = new Uri("https://emergeproj.azurewebsites.net/api/newsalert?") };

            HttpResponseMessage response = null;

            var payload = new NewsAlert()
            {
                Time = Time,
                Title = Title,
                Affected = Affected,
                Author = Author,
                Description = Description,
                Priority = Priority,
                ImageUrl = ImageUrl,
                Updates = Updates
            };

            var payloadString = new StringContent(System.Text.Json.JsonSerializer.Serialize(payload), Encoding.UTF8, MediaTypeNames.Application.Json);

            response = await client.PostAsync(client.BaseAddress, payloadString);

            _processing = false;
        }

        }
